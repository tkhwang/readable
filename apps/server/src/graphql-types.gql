# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""Auth providers"""
enum AuthProviders {
  Facebook
  Github
  Google
}

type CommonOutput {
  """공통 Response (output)"""
  isSuccess: Boolean!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeleteUserBookmarkWithAuthInput {
  userBookmarkId: String!
}

input FindOrAddInterestWithAuthInput {
  """Interest text"""
  interest: String!
}

input FollowUserWithAuthInput {
  """Following User id"""
  followingUserId: String!
}

type FollowUserWithAuthOutput {
  """Follow response data"""
  data: FollowUserWithAuthOutputData!

  """Common output"""
  isSuccess: Boolean!
}

type FollowUserWithAuthOutputData {
  """Following User"""
  followingUser: User!
}

type Interest {
  createdAt: DateTime!
  deletedAt: DateTime!
  id: ID!
  interest: String!
  updatedAt: DateTime!
  userId: String!
}

type Mutation {
  deleteUserBookmarkWithAuth(deleteUserBookmarkWithAuthInput: DeleteUserBookmarkWithAuthInput!): CommonOutput!
  findOrAddInterestWithAuth(findOrAddInterestWithAuthInput: FindOrAddInterestWithAuthInput!): Interest!
  followUserWithAuth(followUserWithAuthInput: FollowUserWithAuthInput!): FollowUserWithAuthOutput!
  syncGoogleCalendarWithAuth(syncGoogleCalendarWithAuthInput: SyncGoogleCalendarWithAuthInput!): CommonOutput!
  unfollowUserWithAuth(unfollowUserWithAuthInput: UnfollowUserWithAuthInput!): UnfollowUserWithAuthOutput!
}

type OAuthUser {
  accessToken: String
  avatarUrl: String
  createdAt: DateTime!
  deletedAt: DateTime!
  email: String
  id: ID!
  name: String!
  provider: AuthProviders!
  providerId: String!
  refreshToken: String
  updatedAt: DateTime!
  user: User!
}

"""Relay Style Pagination Curosr"""
scalar PaginationCursor

"""Pagination Order (ASC or DESC)"""
enum PaginationOrder {
  ASC
  DESC
}

"""Pagination OrderBy"""
enum PaginationOrderBy {
  LATEST
  LIKE_COUNT
}

type PaginationPageInfo {
  endCursor: PaginationCursor
  hasNextPage: Boolean!
}

type PaginationTagBRFOEdge {
  cursor: PaginationCursor!
  node: Tag!
}

type PaginationTags {
  edges: [PaginationTagsEdge!]!
  pageInfo: PaginationPageInfo!
}

type PaginationTagsEdge {
  cursor: PaginationCursor!
  node: Tag!
}

type PaginationUserBookmarkBRFOEdge {
  cursor: PaginationCursor!
  node: UserBookmark!
}

type PaginationUserBookmarkEdge {
  cursor: PaginationCursor!
  node: UserBookmark!
}

type PaginationUserBookmarks {
  edges: [PaginationUserBookmarkEdge!]!
  pageInfo: PaginationPageInfo!
}

type Query {
  allUrlInfosBySearch(searchByTextInAllUrlinfosInput: SearchByTextInAllUrlinfosInput!): [UrlInfo!]
  me: User!
  myInterests: [Interest!]!
  myUserBookmarks: [UserBookmark!]!
  paginationTags(after: PaginationCursor, first: Int = 10, order: PaginationOrder = DESC, orderBy: PaginationOrderBy = LATEST): PaginationTags
  paginationUserBookmarks(after: PaginationCursor, first: Int = 10, interestId: String, myUserBookmark: Boolean, order: PaginationOrder = DESC, orderBy: PaginationOrderBy = LATEST, tagId: String, userId: String): PaginationUserBookmarks
  tagSuggestion(suggestTagInput: SuggestTagInput!): [Tag!]
}

input SearchByTextInAllUrlinfosInput {
  query: String!
}

input SuggestTagInput {
  """Query text for tag suggestion"""
  query: String!
}

input SyncGoogleCalendarWithAuthInput {
  """Sync userBookmark with Google calendar"""
  urlInfo: SyncGoogleCalendarWithAuthUrlInfo!
}

input SyncGoogleCalendarWithAuthUrlInfo {
  scheduledAt: DateTime
  title: String!
  url: String!
}

type Tag {
  createdAt: DateTime!
  deletedAt: DateTime!
  description: String

  """Tag followers User count (resolver field)"""
  followersCount: Float!
  id: ID!
  imageUrl: String
  normalizedTag: String!
  tag: String!
  updatedAt: DateTime!

  """Tagged post count (resolver field)"""
  userBookmarksCount: Float!
}

input UnfollowUserWithAuthInput {
  """Unfollowing User id"""
  followingUserId: String!
}

type UnfollowUserWithAuthOutput {
  data: UnfollowUserWithAuthOutputData!

  """Common output"""
  isSuccess: Boolean!
}

type UnfollowUserWithAuthOutputData {
  """Following User"""
  followingUser: User!
}

type UrlInfo {
  createdAt: DateTime!
  deletedAt: DateTime!

  """Description"""
  description: String

  """Site favicon"""
  favicon: String
  howMany: Int!
  id: ID!

  """Image url"""
  imageUrl: String

  """Site name"""
  siteName: String

  """Summary"""
  summary: String

  """Title"""
  title: String

  """Type : website, article, ..."""
  type: String
  updatedAt: DateTime!

  """URL"""
  url: String!

  """URL Hash"""
  urlHash: String!
}

type User {
  avatarUrl: String
  createdAt: DateTime!
  deletedAt: DateTime!
  email: String
  followersCount: Float!

  """Followings User count"""
  followingsCount: Float!
  id: ID!
  latestInterestId: String
  name: String!
  oauthUsers: [OAuthUser!]!
  provider: AuthProviders!
  providerId: String!

  """Tags"""
  tags: [Tag!]!
  timezone: String!
  updatedAt: DateTime!
}

type UserBookmark {
  """User who bookmarked this url (field resolver)"""
  bookmarkers: [User!]!

  """Number of user who bookmarked this url (field resolver)"""
  bookmarkersCount: Float!
  createdAt: DateTime!
  deletedAt: DateTime!
  donedAt: DateTime
  id: ID!
  interest: Interest!

  """User who read this url (field resolver)"""
  readers: [User!]!

  """Number of user who read this url (field resolver)"""
  readersCount: Float!
  scheduledAt: DateTime

  """Tags"""
  tags: [Tag!]!
  updatedAt: DateTime!

  """URL hash"""
  urlHash: String!
  urlInfo: UrlInfo!
  userId: String!
}

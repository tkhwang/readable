# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AddBookMarkWithAuthInput {
  url: String!
}

input AddInGoogleEventsInput {
  """Bookmarks for adding in Google calendar events"""
  bookmarks: [BookmarkInput!]!
}

"""Auth providers"""
enum AuthProviders {
  Facebook
  Github
  Google
}

type Bookmark {
  collectors: [User!]
  createdAt: DateTime!
  deletedAt: DateTime!
  description: String!
  finishers: [User!]
  generatedImage: String!
  howMany: Int!
  id: ID!
  imageUrl: String!
  keywordIds: [String!]!
  keywords: [String!]!
  schedulers: [User!]
  siteName: String!
  summary: String
  tags: [String!]!
  title: String!
  type: String!
  updatedAt: DateTime!
  url: String!
  urlHash: String!
}

type BookmarkBRFO {
  createdAt: DateTime!
  deletedAt: DateTime!
  description: String!
  generatedImage: String!
  howMany: Int!
  id: ID!
  imageUrl: String!
  keywordIds: [String!]!
  siteName: String!
  summary: String
  tags: [String!]!
  title: String!
  type: String!
  updatedAt: DateTime!
  url: String!
  urlHash: String!
}

input BookmarkInput {
  scheduledAt: DateTime!
  title: String!
  url: String!
}

type CommonOutput {
  """공통 Response (output)"""
  isSuccess: Boolean!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeleteBookmarkWithAuthInput {
  bookmarkId: String!
}

type Mutation {
  addBookmarkInGoogleEventsWithAuth(addInGoogleEventsInput: AddInGoogleEventsInput!): CommonOutput!
  addBookmarkWithAuth(addBookMarkWithAuthInput: AddBookMarkWithAuthInput!): Bookmark!
  deleteBookmarkWithAuth(deleteBookmarkWithAuthInput: DeleteBookmarkWithAuthInput!): CommonOutput!
}

type OAuthUser {
  accessToken: String
  avatarUrl: String
  createdAt: DateTime!
  deletedAt: DateTime!
  email: String
  id: ID!
  name: String!
  provider: AuthProviders!
  providerId: String!
  refreshToken: String
  updatedAt: DateTime!
  user: User!
}

type PaginationBookmarkBRFOEdge {
  cursor: PaginationCursor!
  node: BookmarkBRFO!
}

type PaginationBookmarkEdge {
  cursor: PaginationCursor!
  node: Bookmark!
}

type PaginationBookmarks {
  edges: [PaginationBookmarkEdge!]!
  pageInfo: PaginationPageInfo!
}

"""Relay Style Pagination Curosr"""
scalar PaginationCursor

"""Pagination Order (ASC or DESC)"""
enum PaginationOrder {
  ASC
  DESC
}

"""Pagination OrderBy"""
enum PaginationOrderBy {
  LATEST
  LIKE_COUNT
}

type PaginationPageInfo {
  endCursor: PaginationCursor
  hasNextPage: Boolean!
}

type Query {
  me: User!
  myBookmarks: [Bookmark!]!
  paginationBookmarks(after: PaginationCursor, first: Int = 10, order: PaginationOrder = DESC, orderBy: PaginationOrderBy = LATEST): PaginationBookmarks
}

type User {
  avatarUrl: String
  createdAt: DateTime!
  deletedAt: DateTime!
  email: String
  id: ID!
  name: String!
  oauthUsers: [OAuthUser!]!
  provider: AuthProviders!
  providerId: String!
  updatedAt: DateTime!
}

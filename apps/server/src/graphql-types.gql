# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AddBookMarkWithAuthInput {
  """User interest which includes bookmarks."""
  interest: [String!]!

  """Tag ids"""
  tags: [String!]
  url: String!
}

input AddInGoogleEventsInput {
  """Bookmarks for adding in Google calendar events"""
  bookmarks: [BookmarkInput!]!
}

"""Auth providers"""
enum AuthProviders {
  Facebook
  Github
  Google
}

type Bookmark {
  collectors: [User!]
  createdAt: DateTime!
  deletedAt: DateTime!
  description: String!
  finishers: [User!]
  generatedImage: String!
  howMany: Int!
  id: ID!
  imageUrl: String!
  interest: Interest!

  """User interest which includes bookmarks."""
  interestId: [String!]!
  schedulers: [User!]
  siteName: String!
  summary: String

  """tag ids"""
  tagIds: [String!]
  tags: [Tag!]!
  title: String!
  type: String!
  updatedAt: DateTime!
  url: String!
  urlHash: String!
}

type BookmarkBRFO {
  createdAt: DateTime!
  deletedAt: DateTime!
  description: String!
  generatedImage: String!
  howMany: Int!
  id: ID!
  imageUrl: String!

  """User interest which includes bookmarks."""
  interestId: [String!]!
  siteName: String!
  summary: String

  """tag ids"""
  tagIds: [String!]
  title: String!
  type: String!
  updatedAt: DateTime!
  url: String!
  urlHash: String!
}

input BookmarkInput {
  scheduledAt: DateTime!
  title: String!
  url: String!
}

type CommonOutput {
  """공통 Response (output)"""
  isSuccess: Boolean!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeleteBookmarkWithAuthInput {
  bookmarkId: String!
}

input DeleteUserBookmarkWithAuthInput {
  userBookmarkId: String!
}

input FindOrAddInterestWithAuthInput {
  """Interest text"""
  interest: String!
}

input FollowUserWithAuthInput {
  """Following User id"""
  followingUserId: String!
}

type FollowUserWithAuthOutput {
  """Follow response data"""
  data: FollowUserWithAuthOutputData!

  """Common output"""
  isSuccess: Boolean!
}

type FollowUserWithAuthOutputData {
  """Following User"""
  followingUser: User!
}

input GetPaginationUserBookmarksInput {
  after: PaginationCursor
  first: Int = 10

  """Pagination userBookmark filter: interest (in user bookmarks)"""
  interestId: String

  """Pagination bookmarks order field"""
  order: PaginationOrder = DESC

  """Pagination bookmarks orderBy field"""
  orderBy: PaginationOrderBy = LATEST

  """Pagination userBookmark filter: tag (in all users bookmarks)"""
  tagId: String
}

type Interest {
  createdAt: DateTime!
  deletedAt: DateTime!
  id: ID!
  interest: String!
  updatedAt: DateTime!
  userId: String!
}

type Mutation {
  addBookmarkInGoogleEventsWithAuth(addInGoogleEventsInput: AddInGoogleEventsInput!): CommonOutput!
  addBookmarkWithAuth(addBookMarkWithAuthInput: AddBookMarkWithAuthInput!): Bookmark!
  deleteBookmarkWithAuth(deleteBookmarkWithAuthInput: DeleteBookmarkWithAuthInput!): CommonOutput!
  deleteUserBookmarkWithAuth(deleteUserBookmarkWithAuthInput: DeleteUserBookmarkWithAuthInput!): CommonOutput!
  findOrAddInterestWithAuth(findOrAddInterestWithAuthInput: FindOrAddInterestWithAuthInput!): Interest!
  followUserWithAuth(followUserWithAuthInput: FollowUserWithAuthInput!): FollowUserWithAuthOutput!
  syncGoogleCalendarWithAuth(syncGoogleCalendarWithAuthInput: SyncGoogleCalendarWithAuthInput!): CommonOutput!
  unfollowUserWithAuth(unfollowUserWithAuthInput: UnfollowUserWithAuthInput!): UnfollowUserWithAuthOutput!
}

type OAuthUser {
  accessToken: String
  avatarUrl: String
  createdAt: DateTime!
  deletedAt: DateTime!
  email: String
  id: ID!
  name: String!
  provider: AuthProviders!
  providerId: String!
  refreshToken: String
  updatedAt: DateTime!
  user: User!
}

type PaginationBookmarkBRFOEdge {
  cursor: PaginationCursor!
  node: BookmarkBRFO!
}

type PaginationBookmarkEdge {
  cursor: PaginationCursor!
  node: Bookmark!
}

type PaginationBookmarks {
  edges: [PaginationBookmarkEdge!]!
  pageInfo: PaginationPageInfo!
}

"""Relay Style Pagination Curosr"""
scalar PaginationCursor

"""Pagination Order (ASC or DESC)"""
enum PaginationOrder {
  ASC
  DESC
}

"""Pagination OrderBy"""
enum PaginationOrderBy {
  LATEST
  LIKE_COUNT
}

type PaginationPageInfo {
  endCursor: PaginationCursor
  hasNextPage: Boolean!
}

type PaginationUserBookmarkBRFOEdge {
  cursor: PaginationCursor!
  node: UserBookmark!
}

type PaginationUserBookmarkEdge {
  cursor: PaginationCursor!
  node: UserBookmark!
}

type PaginationUserBookmarks {
  edges: [PaginationUserBookmarkEdge!]!
  pageInfo: PaginationPageInfo!
}

type Query {
  me: User!
  myBookmarks: [Bookmark!]!
  myInterests: [Interest!]!
  myUserBookmarks: [UserBookmark!]!
  paginationBookmarks(after: PaginationCursor, first: Int = 10, order: PaginationOrder = DESC, orderBy: PaginationOrderBy = LATEST): PaginationBookmarks
  paginationUserBookmarks(getPaginationUserBookmarksInput: GetPaginationUserBookmarksInput!): PaginationUserBookmarks
}

input SyncGoogleCalendarWithAuthInput {
  """Sync userBookmark with Google calendar"""
  urlInfo: SyncGoogleCalendarWithAuthUrlInfo!
}

input SyncGoogleCalendarWithAuthUrlInfo {
  scheduledAt: DateTime
  title: String!
  url: String!
}

type Tag {
  createdAt: DateTime!
  deletedAt: DateTime!
  id: ID!
  tag: String!
  updatedAt: DateTime!
}

input UnfollowUserWithAuthInput {
  """Unfollowing User id"""
  followingUserId: String!
}

type UnfollowUserWithAuthOutput {
  data: UnfollowUserWithAuthOutputData!

  """Common output"""
  isSuccess: Boolean!
}

type UnfollowUserWithAuthOutputData {
  """Following User"""
  followingUser: User!
}

type UrlInfo {
  createdAt: DateTime!
  deletedAt: DateTime!

  """Description"""
  description: String
  howMany: Int!
  id: ID!

  """Image url"""
  imageUrl: String

  """Site name"""
  siteName: String

  """Summary"""
  summary: String

  """Title"""
  title: String

  """Type : website, article, ..."""
  type: String
  updatedAt: DateTime!

  """URL"""
  url: String!

  """URL Hash"""
  urlHash: String!
}

type User {
  avatarUrl: String
  createdAt: DateTime!
  deletedAt: DateTime!
  email: String
  followersCount: Float!

  """Followings User count"""
  followingsCount: Float!
  id: ID!
  latestInterestId: String
  name: String!
  oauthUsers: [OAuthUser!]!
  provider: AuthProviders!
  providerId: String!
  timezone: String!
  updatedAt: DateTime!
}

type UserBookmark {
  """User who bookmarked this url"""
  bookmarkers: [User!]!
  createdAt: DateTime!
  deletedAt: DateTime!
  donedAt: DateTime
  id: ID!
  interest: Interest!

  """User who read this url"""
  readers: [User!]!
  scheduledAt: DateTime

  """Tags"""
  tags: [Tag!]!
  updatedAt: DateTime!

  """URL hash"""
  urlHash: String!
  urlInfo: UrlInfo!
  userId: String!
}
